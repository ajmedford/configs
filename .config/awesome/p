-- Standard awesome library
require("awful")
require("awful.autofocus")
require("awful.rules")
-- Theme handling library
require("beautiful")
-- Notification library
require("naughty")
require("vicious")
require('shifty')
require("obvious.clock") -- Load the module
require("obvious.volume_alsa") -- Load the module
require("obvious.cpu") -- Load the module
require("rodentbane")
require("io")
require("aweswt")

-- Load Debian menu entries
require("debian.menu")

-- {{{ Variable definitions
-- Themes define colours, icons, and wallpapers
--beautiful.init("/usr/share/awesome/themes/default/theme.lua")
beautiful.init("/home/pazz/.config/awesome/themes/pazz/theme.lua")
--beautiful.init("/home/pazz/.config/awesome/zenburn.lua")
--beautiful.init(awful.util.getdir("config") .. "/zenburn.lua")

-- This is used later as the default terminal and editor to run.
terminal = "urxvt"
lockcmd = "xtrlock"
editor = os.getenv("EDITOR") or "editor"
editor_cmd = terminal .. " -e " .. editor
irssiscreen=terminal .. " -T irssi -e ssh -X pazz@0x7fffffff.net"

-- Default modkey.
modkey = "Mod4"

-- naughty popup settings
naughty.config.presets.normal.timeout     = 15
naughty.config.presets.critical.timeout     = 15
naughty.config.presets.critical.bg     = beautiful.fg_urgent or '#535d6c'
naughty.config.screen = screen.count()



-- Table of layouts to cover with awful.layout.inc, order matters.
layouts =
{
    awful.layout.suit.tile,
    --awful.layout.suit.tile.left,
    awful.layout.suit.tile.bottom,
    --awful.layout.suit.tile.top,
    awful.layout.suit.fair,
    --awful.layout.suit.fair.horizontal,
    awful.layout.suit.spiral,
    awful.layout.suit.spiral.dwindle,
    awful.layout.suit.max,
    --awful.layout.suit.max.fullscreen,
    --awful.layout.suit.magnifier,
    awful.layout.suit.floating
}
-- }}}

--{{{ SHIFTY: configured tags
shifty.config.tags = {
	["sys"] = { --layout = awful.layout.suit.tile, 
					mwfact = 0.65,
					icon=beautiful.sys,
					position = 1, 
					init = false,
				},
	["edit"] = { --layout = awful.layout.suit.tile.right, 
						mwfact = 0.65,
					  	position = 2, 
						--init = true,
				},
	["web"] = { 
					mwfact = 0.65,
					position = 3, 
					init = false,
					icon=beautiful.firefox,
					spawn = 'firefox' 
				},
	["fm"] = { 	
					mwfact = 0.65,
					position = 4, 
					init = false,
					spawn = 'nautilus --no-desktop --browser' 
				},
	["bib"] = { 	
			position = 6, 
			init = false,
			spawn = 'jabref -s',
                        icon="/usr/share/icons/HighContrastLargePrintInverse/48x48/apps/accessories-dictionary.png",
				},
-- 	["snd"] = { 	--layout = awful.layout.suit.floating , 
--                 	position = 6 ,
--						--init=true,
--						icon=beautiful.snd,
--						spawn="quodlibet",
--						--nopopup=true,
--					}, 
 	["calendar"] = {  spawn="prism-google-calendar",
                          icon="/usr/share/icons/HighContrastLargePrintInverse/48x48/mimetypes/x-office-calendar.png",
                          position = 7 
					}, 
	["mail"] = { 
						mwfact = 0.55,
					  	position = 8, 
						init = false,
						icon=beautiful.thunderbird,
					  	spawn = 'thunderbird', 
					},
	["im"] = { 	layout = awful.layout.suit.tile , 
					mwfact = 0.85, 
					--icon = "/usr/share/pixmaps/pidgin/protocols/48/irc.png",
					icon="/usr/share/pixmaps/gnome-irc.png",
					--icon_only=true,
					--nopopup=true,
					position = 9, 
					spawn=irssiscreen .."& pidgin &",
					},
}
--}}}
 
clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ }, 8, function (c) c:kill() end),
    awful.button({ modkey }, 1, awful.mouse.client.move),
    awful.button({ modkey }, 3, awful.mouse.client.resize))
--{{{ SHIFTY: application matching rules
-- order here matters, early rules will be applied first
shifty.config.apps = {
         { match = { "Firefox" }, tag = "web" } ,
         { match = { "Shredder.*","Thunderbird","mutt" } , tag = "mail" } ,
         { match = { ".*Calendar.*" } , tag = "calendar" } ,
         { match = { "OpenOffice.*", "Abiword", "Gnumeric" } , tag = "office" } ,
         { match = { "Mplayer.*","Mirage","gimp","gtkpod","Ufraw","easytag"} , tag = "media", nopopup = true, } ,
         { match = { "MPlayer", "Gnuplot", "galculator" } , float = true } ,
         { match = { terminal } ,slave = true } ,
         { match = { "Pidgin" } ,nopopup=true, honorsizehints = true, slave = true, tag='im'} ,
         { match = { "Quodlibet" } ,tag='snd'} ,
         { match = { "" } , buttons = clientbuttons },
}
--}}}
 
--{{{ SHIFTY: default tag creation rules
-- parameter description
-- * floatBars : if floating clients should always have a titlebar
-- * guess_name : wether shifty should try and guess tag names when creating new (unconfigured) tags
-- * guess_position: as above, but for position parameter
-- * run : function to exec when shifty creates a new tag
-- * remember_index: ?
-- * all other parameters (e.g. layout, mwfact) follow awesome's tag API
shifty.config.defaults={
  layout = awful.layout.suit.tile,
  ncol = 1,
  mwfact = 0.60,
  floatBars=true,
  guess_name=false,
  guess_position=true,
  leave_kills=true,
}
--}}}
--
--
--



-- {{{ Menu
-- Create a laucher widget and a main menu
myawesomemenu = {
   { "manual", terminal .. " -e man awesome" },
   { "edit config", editor_cmd .. " " .. awful.util.getdir("config") .. "/rc.lua" },
   { "restart", awesome.restart },
}

mymainmenu = awful.menu({ items = { { "awesome", myawesomemenu, beautiful.awesome_icon },
                                    { "Debian", debian.menu.Debian_menu.Debian },
   											{ "logout", awesome.quit }
                                  }
                        })

mylauncher = awful.widget.launcher({ image = image(beautiful.awesome_icon),
                                     menu = mymainmenu })
-- }}}

-- {{{ Wibox
-- Create a textclock widget
--mytextclock = awful.widget.textclock({ align = "right" })

-- Create a systray
mysystray = widget({ type = "systray" })

-- create a wibox for each screen and add it
mywibox = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
                    awful.button({ }, 1, awful.tag.viewonly),
                    awful.button({ modkey }, 1, awful.client.movetotag),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, awful.client.toggletag),
                    awful.button({ }, 4, awful.tag.viewnext),
                    awful.button({ }, 5, awful.tag.viewprev)
                    )

--DATEBOX
obvious.clock.set_editor(editor_cmd)
obvious.clock.set_longformat("%a %b %d, %R")
obvious.clock.set_shortformat("%R")


--netwidget = awful.widget.graph({layout = awful.widget.layout.horizontal.rightleft})
--netwidget:set_width(50)
--netwidget:set_background_color(theme.bg_normal)
--netwidget:set_border_color(nil)
--netwidget:set_color("#AECF96")
--netwidget:set_gradient_colors({ "#AECF96", "#88A175", "#FF5656" })
--vicious.register(netwidget, vicious.widgets.net, "$1", 13)
-- Initialize widget
memwidget = awful.widget.graph({layout = awful.widget.layout.horizontal.rightleft})
memwidget:set_width(50)
memwidget:set_background_color(theme.bg_normal)
memwidget:set_border_color(nil)
memwidget:set_color("#AECF96")
memwidget:set_gradient_colors({ "#AECF96", "#88A175", "#FF5656" })
vicious.register(memwidget, vicious.widgets.mem, "$1", 13)

-- Initialize widget
cpuwidget = awful.widget.graph({layout = awful.widget.layout.horizontal.rightleft})
-- Graph properties
cpuwidget:set_width(50)
cpuwidget:set_background_color(theme.bg_normal)
cpuwidget:set_color("#FF5656")
cpuwidget:set_gradient_colors({ "#AEC6D8", "#285577", "#285577" })
-- Register widget
vicious.register(cpuwidget, vicious.widgets.cpu, "$1")
cpuwidget.buttons = awful.util.table.join(
	awful.button({ }, 1, function () awful.util.spawn('sudo samsung-scripts cpuperf') end),
	awful.button({ }, 2, function () awful.util.spawn(terminal .. '-e htop') end))

-- {{{ Battery state
baticon = widget({ type = "imagebox" })
baticon.image = image(beautiful.widget_bat)
-- Initialize widget
batbarwidget  = awful.widget.progressbar({layout = awful.widget.layout.horizontal.rightleft})
batbarwidget:set_width(8)
batbarwidget:set_height(18)
batbarwidget:set_vertical(true)
batbarwidget:set_background_color(beautiful.bg_normal)
batbarwidget:set_border_color(nil)
batbarwidget:set_gradient_colors({ "#C20000", "#FF9E3D", "#61C200" })
vicious.register(batbarwidget, vicious.widgets.bat, "$2", 61, "BAT1")
batwidget = widget({ type = "textbox" })
-- Register widget
vicious.register(batwidget, vicious.widgets.bat, "$1$2%", 61, "BAT1")


--gmailwidget = widget({ type = "textbox", align = "right" })
-- -- Register widget
--vicious.register(gmailwidget, vicious.widgets.gmail, "GMAIL: ${count}", 60)

---- {{{ Volume level
-- Widget icon
--volicon       = widget({ type = "imagebox", name = "volicon" })
--olicon.image = image(beautiful.widget_vol)
-- Initialize widgets
--volwidget     = widget({ type = "textbox", name = "volwidget" })
volbarwidget  = awful.widget.progressbar({layout = awful.widget.layout.horizontal.rightleft})
volbarwidget:set_width(8)
volbarwidget:set_height(18)
volbarwidget:set_vertical(true)
volbarwidget:set_background_color(beautiful.bg_normal)
--volbarwidget:set_border_color(nil)
--volbarwidget.ticks_count(7)
volbarwidget:set_gradient_colors({ "#AEC6D8", "#285577", "#285577" })
-- Register widget
--awful.widget.layout.margins[volbarwidget.widget] = { left = 10}
-- Register widgets
--vicious.register(volwidget, vicious.widgets.volume, "$1%", 1, "PCM")
vicious.register(volbarwidget, vicious.widgets.volume, "$1", 1, "Master")
-- Register buttons
---- }}}
--
--
alsaw = obvious.volume_alsa() -- Add this to your widgets list 
alsaw.layout=awful.widget.layout.horizontal.rightleft
awful.widget.layout.margins[alsaw] = { left = 5}

spacer = widget({type="textbox",align = "right"})
spacer.text=''
spacer.width = 6
awful.widget.layout.margins[spacer] = { left = 10}


--function xrandr_screens ()
--    local screens = {}
--    local counter = 1
--    local handle = io.popen("xrandr -q")
--    for display in handle:read("*all"):gmatch("([%a%d-]+) connected") do
--        screens[display] = counter
--        counter = counter + 1
--    end
--    handle:close()
--    return screens
--end
--
--SCREENS = xrandr_screens()

for s = 1, screen.count() do
    -- Create a promptbox for each screen
    mypromptbox[s] = awful.widget.prompt({ layout = awful.widget.layout.horizontal.leftright })
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
                           awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                           awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
    awful.widget.layout.margins[mylayoutbox[s]] = { bottom = 1,}
    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.label.all, mytaglist.buttons)

    -- Create the wibox
    mywibox[s] = awful.wibox({ position = "top", screen = s, height = "20"})
    -- Add widgets to the wibox - order matters

   mywibox[s].widgets = { 
       {
           mytaglist[s],
           mypromptbox[s],
           layout = awful.widget.layout.horizontal.leftright
       },
       s == screen.count() and mysystray or nil,
		 --datewidget, spacer,
       s == screen.count() and obvious.clock() or nil,
       s == screen.count() and spacer or nil,
       mylayoutbox[s], spacer,
		 --volwidget, 
		 --volicon,
       s == screen.count() and cpuwidget or nil,
       s == screen.count() and spacer or nil,
       --memwidget,
		 --gmailwidget,
       s == screen.count() and alsaw or nil,
       s == screen.count() and volbarwidget or nil,
       s == screen.count() and spacer or nil,
       s == screen.count() and batwidget or nil,
       --s == screen.count() and baticon or nil,
       s == screen.count() and batbarwidget or nil,
       s == screen.count() and spacer or nil,

       --layout = awful.widget.layout.default
       layout = awful.widget.layout.horizontal.rightleft
	}
end
-- }}}


--{{{ SHIFTY: initialize shifty
-- the assignment of shifty.taglist must always be after its actually initialized
-- with awful.widget.taglist.new()
shifty.taglist = mytaglist
shifty.init()
--}}}


-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}
--PAZZ
function focus_next()
            awful.client.focus.byidx( 1)
            if client.focus then client.focus:raise() end
end
function focus_prev()
    awful.client.focus.byidx(-1)
    if client.focus then client.focus:raise() end
end
function toggle_statusbar()
	if mywibox[mouse.screen].screen == nil then
      mywibox[mouse.screen].screen = mouse.screen
   else
      mywibox[mouse.screen].screen = nil
   end
end
--ENDPAZZ
-- {{{ Key bindings
globalkeys = awful.util.table.join(
    awful.key({ modkey, "Control" }, "Left",   awful.tag.viewprev       ),
    awful.key({ modkey, "Control" }, "Right",  awful.tag.viewnext       ),
    awful.key({ modkey,           }, "Escape", awful.tag.history.restore),

    awful.key({ modkey,           }, "j", focus_next),
    awful.key({ modkey,           }, "k", focus_prev),
    awful.key({ modkey,            }, "Tab", focus_next),
    awful.key({ modkey, "Shift",   }, "Tab", focus_prev),
    awful.key({ modkey,           }, "m", function () mymainmenu:show(true)        end),
	 --multimedia and fn keys
    awful.key({}, "XF86Launch1", function () awful.util.spawn('samsung-tools -b toggle') end),
    awful.key({}, "XF86Display", function () awful.util.spawn('toggleDisplays.sh') end),
    awful.key({}, "XF86Launch2", function () awful.util.spawn('samsung-tools -n -w toggle') end),
    awful.key({}, "XF86Launch3", function () awful.util.spawn('samsung-tools -n -c cycle') end),
    --awful.key({}, "XF86Battery", function () awful.util.spawn('samsung-scripts ') end),
    awful.key({}, "XF86WLAN", function () awful.util.spawn('samsung-tools -n -W toggle') end),
    awful.key({}, "XF86AudioMute", function () alsaw:mute() end),
    awful.key({}, "XF86AudioRaiseVolume", function () alsaw:raise() end),
    awful.key({}, "XF86AudioLowerVolume", function () alsaw:lower() end),
    awful.key({}, "XF86MonBrightnessUp", function () awful.util.spawn('xbacklight +15') end),
    awful.key({}, "XF86MonBrightnessDown", function () awful.util.spawn('xbacklight -15') end),
    awful.key({ modkey }, "t", function () awful.util.spawn('truecrypt /var/crypto/crypto.log') end),
    awful.key({ modkey, "Shift"}, "t", function () awful.util.spawn('truecrypt -d /var/crypto/crypto.log') end),
    awful.key({ modkey,   }, "s", aweswt.switch),

	-- SHIFTY: keybindings specific to shifty
	 awful.key({ modkey,  }, "d", shifty.del), -- delete a tag
	 awful.key({ modkey, "Shift","Control" }, "Left", shifty.send_prev),-- move client to prev tag
	 awful.key({ modkey, "Shift","Control" }, "Right", shifty.send_next),-- move client to next tag
	 awful.key({ modkey,"Control"}, "n", function()
	   shifty.tagtoscr(awful.util.cycle(screen.count(), mouse.screen +1))
	 end),-- move client to next tag
	 awful.key({ modkey }, "a", shifty.add), -- creat a new tag
	 awful.key({ modkey }, "r", shifty.rename), -- rename a tag
	 awful.key({ modkey, "Shift" }, "a", -- nopopup new tag
	   function()
	 	 shifty.add({ nopopup = true })
	   end),
    --awful.key({						 }, "XF86Mail",	 awful.tag.viewprev),

    -- Layout manipulation
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end),
    awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end),
    awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto),
    --awful.key({ modkey,           }, "Tab",
    --    function ()
    --        awful.client.focus.history.previous()
    --        if client.focus then
    --            client.focus:raise()
    --        end
    --    end),

    -- Standard program
    awful.key({ modkey, "Shift"   }, "BackSpace", function () rodentbane.start() end),
    awful.key({ modkey, "Shift"   }, "Return", function () awful.util.spawn(terminal) end),
    --awful.key({ modkey, "Shift"   }, "o", function () awful.util.spawn("oclock -transparent") end),
    awful.key({ modkey }, "Scroll_Lock",      function () awful.util.spawn(lockcmd) end),
    awful.key({ modkey, "Control" }, "r", awesome.restart),
    awful.key({ modkey, "Control"   }, "q", awesome.quit),
    awful.key({ modkey,   }, "b", toggle_statusbar),

    awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)    end),
    awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)    end),
    awful.key({ modkey, "Control","Shift"   }, "h",     function () awful.tag.incnmaster( 1)      end),
    awful.key({ modkey, "Control", "Shift"  }, "l",     function () awful.tag.incnmaster(-1)      end),
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1)         end),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1)         end),
    awful.key({ modkey,           }, "space", function () awful.layout.inc(layouts,  1) end),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(layouts, -1) end),

    -- Prompt
    awful.key({ modkey },            "o",     function () mypromptbox[mouse.screen]:run() end)
)

clientkeys = awful.util.table.join(
    awful.key({ modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
    awful.key({ modkey,           }, "w",      function (c) c:kill()                         end),
    awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ),
    awful.key({ modkey,           }, "Return", function (c) c:swap(awful.client.getmaster()) end),
    awful.key({ modkey, "Shift"	 }, "o",      awful.client.movetoscreen                        ),
    awful.key({ modkey, "Shift"   }, "r",      function (c) c:redraw()                       end),
    awful.key({ modkey, "Shift"   }, "l",     function (c) awful.client.incwfact(0.05,c)  end),
    awful.key({ modkey, "Shift"   }, "h",     function (c) awful.client.incwfact(-0.05,c)  end),
    awful.key({ modkey, "Shift"   }, "m",
        function (c)
            c.maximized_horizontal = not c.maximized_horizontal
            c.maximized_vertical   = not c.maximized_vertical
        end)
)

for i=1,9 do
  
  globalkeys = awful.util.table.join(globalkeys, awful.key({ modkey }, i,
  function ()
    local t = awful.tag.viewonly(shifty.getpos(i))
  end))
  globalkeys = awful.util.table.join(globalkeys, awful.key({ modkey, "Control" }, i,
  function ()
    local t = shifty.getpos(i)
    t.selected = not t.selected
  end))
  globalkeys = awful.util.table.join(globalkeys, awful.key({ modkey, "Control", "Shift" }, i,
  function ()
    if client.focus then
      awful.client.toggletag(shifty.getpos(i))
    end
  end))
  -- move clients to other tags
  globalkeys = awful.util.table.join(globalkeys, awful.key({ modkey, "Shift" }, i,
    function ()
      if client.focus then
        local t = shifty.getpos(i)
        awful.client.movetotag(t)
        awful.tag.viewonly(t)
      end
    end))
end

--PAZZ SHIFTY
-- Compute the maximum number of digit we need, limited to 9
--keynumber = 0
--for s = 1, screen.count() do
--   keynumber = math.min(9, math.max(#tags[s], keynumber));
--end
--
---- Bind all key numbers to tags.
---- Be careful: we use keycodes to make it works on any keyboard layout.
---- This should map on the top row of your keyboard, usually 1 to 9.
--for i = 1, keynumber do
--    globalkeys = awful.util.table.join(globalkeys,
--        awful.key({ modkey }, "#" .. i + 9,
--                  function ()
--                        local screen = mouse.screen
--                        if tags[screen][i] then
--                            awful.tag.viewonly(tags[screen][i])
--                        end
--                  end),
--        awful.key({ modkey, "Control" }, "#" .. i + 9,
--                  function ()
--                      local screen = mouse.screen
--                      if tags[screen][i] then
--                          awful.tag.viewtoggle(tags[screen][i])
--                      end
--                  end),
--        awful.key({ modkey, "Shift" }, "#" .. i + 9,
--                  function ()
--                      if client.focus and tags[client.focus.screen][i] then
--                          awful.client.movetotag(tags[client.focus.screen][i])
--                      end
--                  end),
--        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
--                  function ()
--                      if client.focus and tags[client.focus.screen][i] then
--                          awful.client.toggletag(tags[client.focus.screen][i])
--                      end
--                  end))
--end


-- Set keys
-- }}}
-- Set keys
root.keys(globalkeys)
shifty.config.globalkeys = globalkeys
shifty.config.clientkeys = clientkeys


-- {{{ Rules
-- }}}
--awful.hooks.manage.register(function (c, startup)
--	 c.size_hints_honor = false
--end)
-- {{{ Signals
-- Signal function to execute when a new client appears.
client.add_signal("manage", function (c, startup)
    -- Add a titlebar
    -- awful.titlebar.add(c, { modkey = modkey })

    -- Enable sloppy focus
    c:add_signal("mouse::enter", function(c)
        if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
            and awful.client.focus.filter(c) then
            client.focus = c
        end
    end)

	 --remove gaps! PAZZ
	 c.size_hints_honor = false

	 --if #move_to then
	 --   c.screen = move_to[#move_to].screen
	 --   awful.client.movetotag(move_to[#move_to].tag, c)
	 --   move_to.remove()
	 --end

--    if not startup then
--        -- Set the windows at the slave,
--        -- i.e. put it at the end of others instead of setting it master.
--        -- awful.client.setslave(c)
--
--        -- Put windows in a smart way, only if they does not set an initial position.
--        if not c.size_hints.user_position and not c.size_hints.program_position then
--            awful.placement.no_overlap(c)
--            awful.placement.no_offscreen(c)
--        end
--    end
end)

client.add_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.add_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}
--
--

--os.execute("runonce pidgin &")
os.execute("eval $(gnome-keyring-daemon --start --components=secrets)")
os.execute("nm-applet &")
--os.execute("tfstp.sh &")
--os.execute("update-notifier &")
os.execute("xfce4-power-manager &")
os.execute("system-config-printer-applet & > /dev/null 2> /dev/null")
